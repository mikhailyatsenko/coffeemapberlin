#!/usr/bin/env node

import { execSync } from 'child_process';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

const DIST_DIR = 'dist';
const ASSETS_DIR = join(DIST_DIR, 'assets');

function analyzeBundle() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –±–∞–Ω–¥–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ tree shaking...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ dist
  if (!existsSync(DIST_DIR)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É:');
    console.log('   npm run build\n');
    return;
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ dist
  try {
    const distSize = execSync(`du -sh ${DIST_DIR}`, { encoding: 'utf8' }).trim();
    console.log(`üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞: ${distSize}`);
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ dist');
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º JavaScript —Ñ–∞–π–ª—ã
  if (existsSync(join(ASSETS_DIR, 'js'))) {
    console.log('\nüìä JavaScript —Ñ–∞–π–ª—ã:');
    try {
      const jsFiles = execSync(`ls -lah ${join(ASSETS_DIR, 'js')}`, { encoding: 'utf8' });
      console.log(jsFiles);
    } catch (error) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JavaScript —Ñ–∞–π–ª—ã');
    }
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CSS —Ñ–∞–π–ª—ã
  if (existsSync(join(ASSETS_DIR, 'css'))) {
    console.log('\nüé® CSS —Ñ–∞–π–ª—ã:');
    try {
      const cssFiles = execSync(`ls -lah ${join(ASSETS_DIR, 'css')}`, { encoding: 'utf8' });
      console.log(cssFiles);
    } catch (error) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSS —Ñ–∞–π–ª—ã');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json –Ω–∞ side effects
  try {
    const packageJson = JSON.parse(readFileSync('package.json', 'utf8'));
    if (packageJson.sideEffects !== false) {
      console.log('\n‚ö†Ô∏è  –í package.json –Ω–µ —É–∫–∞–∑–∞–Ω sideEffects: false');
      console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–µ—à–∞—Ç—å tree shaking');
    } else {
      console.log('\n‚úÖ sideEffects: false —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ package.json');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å package.json');
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ tree shaking
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è tree shaking:');
  console.log('   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤–º–µ—Å—Ç–æ * as');
  console.log('   2. –ò–∑–±–µ–≥–∞–π—Ç–µ default —ç–∫—Å–ø–æ—Ä—Ç–æ–≤');
  console.log('   3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫');
  console.log('   4. –°–ª–µ–¥—É–π—Ç–µ FSD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ');
  console.log('   5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ vite-bundle-analyzer –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ vite-bundle-analyzer
  try {
    const analyzerPath = join('node_modules', 'vite-bundle-analyzer');
    if (existsSync(analyzerPath)) {
      console.log('\nüöÄ –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
      console.log('   npx vite-bundle-analyzer dist');
    } else {
      console.log('\nüì¶ –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:');
      console.log('   npm install --save-dev vite-bundle-analyzer');
      console.log('   npx vite-bundle-analyzer dist');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ vite-bundle-analyzer');
  }

  console.log('\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeBundle(); 